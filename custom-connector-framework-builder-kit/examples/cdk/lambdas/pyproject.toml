[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "custom-connector-framework-examples-cdk-lambdas"
version = "0.1.0"
requires-python = ">=3.12"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=8",
    "pytest-mock>=3",
    "pytest-ordering>=0.6",
    "black>=24",
    "ruff>=0",
    "mypy>=1",
    "isort>=5",
    "coverage>=7",
    "moto[all]>=5",
    "pylint>=3.0.0",
    "pip-tools>=7.4.1",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "src"
]

[tool.ruff]
lint.select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "C90", # mccabe complexity
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]
lint.ignore = [
    "D203",  # one-blank-line-before-class (conflicts with D211)
    "UP045", # non-pep604-annotation-optional (prevents Optional[T] -> T | None conversion)
    "D212",  # multi-line-summary-first-line (conflicts with D213)
    "D107",  # missing docstring in __init__
    "TRY003", # avoid specifying long messages outside the exception class
    "RUF002", # docstring contains ambiguous quotes
    "C901",  # function is too complex
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
lint.unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

line-length = 120

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Updated to Python 3.12
target-version = "py312"

# Enumerate all fixed violations.
show-fixes = true

# By default, always show source code snippets.
output-format = "full"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.mypy]
strict = true
python_version = "3.12"
exclude = ["tests", "build"]
namespace_packages = false
plugins = []
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
show_error_codes = true
pretty = true
explicit_package_bases = false
mypy_path = ""

[tool.black]
line-length = 120
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  tests/data
  | profiling
)/
'''

[tool.pytest]
testpaths = ["tests"]
addopts = "--import-mode=importlib"

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
show_missing = true
skip_empty = true
omit = [
    "def __repr__"
]
ignore_errors = true
